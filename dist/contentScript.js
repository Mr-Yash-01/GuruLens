(()=>{"use strict";let e=null;function t(t,n=[{word:"Loading...",phonetics:[{text:"None",audio:""}],meanings:[{definitions:[{definition:"No meaning found"}]}]}]){const o=document.createElement("div");o.style.position="absolute",o.style.left=(t.left-90>16?t.left-90:10)+"px",o.style.top=(t.top-150>16?t.top-150:10)+"px",o.style.backgroundColor="rgba(0, 0, 0)",o.style.color="white",o.style.padding="10px",o.style.borderRadius="8px",o.style.zIndex="9999",o.style.width="300px",o.style.maxWidth="350px",o.style.boxShadow="0 4px 6px rgba(0, 0, 0, 0.1)";const i=document.createElement("div");i.style.display="flex",i.style.justifyContent="space-between",i.style.alignItems="center";const s=document.createElement("span");s.textContent=n[0].word||"Loading...",s.style.fontSize="16px",s.style.fontWeight="bold";const l=document.createElement("span");l.textContent="Ã—",l.style.fontSize="20px",l.style.cursor="pointer",l.style.color="white",l.addEventListener("click",(t=>{t.stopPropagation(),o.remove(),e=null})),i.appendChild(s),i.appendChild(l);const a=document.createElement("div");a.style.display="flex",a.style.justifyContent="space-between",a.style.alignItems="center",a.style.marginTop="10px";const d=document.createElement("span");if(d.textContent=n[0].phonetics&&n[0].phonetics[0]&&n[0].phonetics[0].text||"None",d.style.fontSize="14px",d.style.color="#ddd",a.appendChild(d),n[0].phonetics&&n[0].phonetics[0]&&n[0].phonetics[0].audio){const e=document.createElement("button");e.textContent="ðŸ”Š",e.style.fontSize="18px",e.style.cursor="pointer",e.style.border="none",e.style.background="transparent",e.style.padding="0",e.style.outline="none",e.setAttribute("aria-label","Play pronunciation"),e.addEventListener("click",(e=>{e.stopPropagation(),n[0].phonetics&&n[0].phonetics[0]&&n[0].phonetics[0].audio?new Audio(n[0].phonetics[0].audio).play().catch((e=>{console.error("Error playing audio:",e)})):console.warn("Audio not available for pronunciation.")})),a.appendChild(e)}const r=document.createElement("div");r.style.marginTop="10px";const c=document.createElement("p");c.textContent=n[0].meanings&&n[0].meanings[0].definitions[0].definition||"No meaning found",c.style.fontSize="16px",c.style.color="#ddd",c.style.lineHeight="1.7",r.appendChild(c),o.appendChild(i),o.appendChild(a),o.appendChild(r),document.body.appendChild(o),e=o}document.addEventListener("mouseup",(()=>{let n;const o=(n=window.getSelection())?n.toString().trim():null;if(console.log("Selected Text:",o),o){let i={top:0,left:0};if(n){const e=n.getRangeAt(0).getBoundingClientRect();i={top:e.top+window.scrollY,left:e.left+window.scrollX}}console.log("Sending selected text to background script..."),chrome.runtime.sendMessage({action:"EXPLAIN_TEXT",selection:o,position:i},(n=>{if(console.log("Received response from background script:",n.data),chrome.runtime.lastError)console.error("Error sending message:",chrome.runtime.lastError);else if(n)if(n.action)switch(n.action){case"IGNORE":break;case"RESULT":chrome.runtime.sendMessage({type:"SHOW_POPUP",data:n.data,position:i}),e&&e.remove(),t(i,n.data);break;case"ERROR":e&&e.remove();const o=n.data&&n.data[0]?[{word:n.data[0].word,phonetics:[{text:"none"}],meanings:[{definitions:[{definition:"No matching Found"}]}]}]:[{word:"Unknown",phonetics:[{text:"none"}],meanings:[{definitions:[{definition:"No matching Found"}]}]}];t(i,o);break;default:console.error("Unexpected response action:",n.action)}else console.error("Unexpected response format:",n);else console.error("No response from background script")}))}else console.log("No text selected."),e&&(e.remove(),e=null)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,